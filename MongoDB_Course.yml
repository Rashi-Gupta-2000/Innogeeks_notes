Database, CRUD
  - Open either a terminal and go to Mongo Prompt OR open terminal from Robo/Studio3T from server menu
    - go into the folder and into bin and open robo by ./robo3t 
    - sudo systemctl start mongod 
  - use <dbname>
    - To insert

      db.Employee.insertOne( {
        firstname: "Nilesh",
        lastname: "parekh",
        email: "nilesh@google.com",
        age: 45,
        isMarried: true
      } )

    - To insert many 
      
      db.Employee.insertMany( 
        [
        {
          firstname: "Nitin",
          lastname: "Shah",
          email: "sachin@google.com",
          age: 42,
          isMarried: true
        },
        {
          firstname: "Nitin",
          lastname: "Patil",
          email: "sachin@google.com",
          age: 40,
          isMarried: true
        },
        {
          firstname: "Sachin",
          lastname: "Shah",
          email: "nitin@google.com",
          age: 45,
          isMarried: true
        }
        ] 
      )


Hello everyone,
Let's utilize today's rest of the day on some research and reiteration of what we have done. I will be dropping by couple of times to discuss but here is what I think - 
1. Create a PostGRES Database Structure with relations and form correct views with triggers for an E-Commerce Admin Panel where admin can create roles, users, permissions, products, categories, manage orders, manage invoices etc. Use your creativity but make sure you demonstrate the proper usage of triggers and views as and where applicable even with lesser number of tables. 
2. Push it to the GIT
3. Create a Simple Table Structure with MongoDB for an EduTech where Students enroll for the courses which are defined by admin, sessions, assignments and use simple InsertMany to register the records. If you may also figure out the UpdateMany and DeleteMany, it would be a fantastic job. 
4. For those who don't know Python at all, please read and try some of the sytaxes from the Document you will find in Prism. Let's see what you achieve just from the document. 

5. Awesome. So as a part of today’s assignment, I want you to revisit the E-Commerce Postgres models we discussed yesterday. On the top of yesterday’s queries, please also create AuditTrails for each table (logs for each table), User Role Management System, and most possible modules from the database level. Later we will use the exact same database structure to develop the Web and Server instance, 


MongoDB 
- Installation 
- https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/ 
- Studio3T 
- Robo3T 
- CRUD 
- db.RecordsDB.insertOne({ 
name: "Marsh", 
age: "6 years", 
species: "Dog", 
ownerAddress: "380 W. Fir Ave", 
chipped: true 
}) 

- db.RecordsDB.insertMany([{ name: "Marsh", age: "6 years", species: "Dog", 
ownerAddress: "380 W. Fir Ave", chipped: true}, {name: "Kitana", age: "4 years", 
species: "Cat", ownerAddress: "521 E. Cortland", chipped: true}]) 
{ 
"acknowledged" : true, 
"insertedIds" : [ 
ObjectId("5fd98ea9ce6e8850d88270b4"), 
ObjectId("5fd98ea9ce6e8850d88270b5") 
] 
} 

- db.RecordsDB.find() 
- db.RecordsDB.find( { status: "A" }, { item: 1, status: 1 } ) --> Specific fields 
- db.inventory.find( { status: "A" }, { item: 1, status: 1, _id: 0 } ) --> ignore _id 
- db.inventory.find( { status: "A" }, { status: 0, instock: 0 } ) --> return all but these fields 
- db.RecordsDB.find({"species":"Cat"}) 
- db.RecordsDB.findOne({"age":"8 years"}) 
- db.RecordsDB.updateOne({name: "Marsh"}, {$set:{ownerAddress: "451 W. Coffee St. A204"}}) 
- db.RecordsDB.updateMany({species:"Dog"}, {$set: {age: "5"}}) 
- db.RecordsDB.replaceOne({name: "Kevin"}, {name: "Maki"}) 
- db.RecordsDB.deleteOne({name:"Maki"}) 
- db.RecordsDB.deleteMany({species:"Dog"}) 
- db.RecordsDB.count() 
- db.RecordsDB.find().limit(10) 


- db.RecordsDB.find({likes: {$gt: 1}}) 
- db.RecordsDB.find({likes: {$lt: 1}}) 
- db.post.find({likes: {$ne: 1}}) 
- db.post.find({likes: {$eq: 1}}) 
- db.user.find().sort({age: 1}) 
- db.user.find( { $and: [ { price: { $ne: 1.99 } }, { price: { $exists: true } } ] } ) 
- db.inventory.find( { $or: [ { quantity: { $lt: 20 } }, { price: 10 } ] } ) 
- db.inventory.find ( { quantity: { $in: [20, 50] } } ) 

Let’s try all of these examples by creating respective table/collection within MongoDB 



To fetch
- db.Employee.find( { "firstname":"John" } )
- db.Employee.find( { "firstname":"John" }, {firstname:1, lastname: 1} ) --> Just to select firstname and lastname
- db.Employee.find( { "firstname":"John" }, {isMarried: 0, _id:0 } ) --> This is to hide the specified cols.
- db.EMployee.findOne( { isMarried: false} )
- db.EMployee.updateOne( { firstname:"John" }, { $set: { age: 20 } } )
- db.EMployee.updatMany( { isMarried: false}, { $set:{ isMarried: true} } )
- db.EMployee.insertOne({ firstname:"Rajesh", lastname:"Patel", email:"rajesh@google.com", age: 44, isMarried: true, designated: "CEO"})
- db.Employee.deleteOne({ fisrtname:"Rajesh"})
- db.Employee.deleteMany( { })
- db.Employee.find({}).sort({ age: 1}) --> sort by ASC
- db.Employee.find({}).sort({ age:-1}) --> sort by DESC
- db.Employee.find( { $and: [ { firstname:"Nitin" }, {lastname: "Patil" } ] } )
- db.Employee.find( { $or: [ { firstname:"Nitin" }, {lastname: "Patil" } ] } )
- db.Employee.find( { age: { $in: [40,42] } } )
- db.Employee.find( { age: { $in: [40,42] } } ).limit(2)

# Mongo data is not stored in the form of tables but in the form of objects to which we can add as many attributes we want 
# One object may have some attributes and others might not this is not some table to which we have to assign null values


systemctl start mongod